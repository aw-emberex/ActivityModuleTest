<?xml version="1.0"?>
<project name="cam" basedir="." default="build"  xmlns:ivy="antlib:org.apache.ivy.ant">
	
	<description>Activity Module</description>
	
	<!-- ============================================================== -->
    <!-- Properties                                                     -->
    <!-- ============================================================== -->
    
    <!-- Import property files -->
    <property file="module.properties"/>
    <property file="build.properties"/>
	
	<!-- Misc. -->
    <property name="module.id" value="${ant.project.name}"/>
    <property name="build.file.basename" value="${module.id}"/>
    <property name="jscomp.compilationLevel" value="simple"/>

	<!-- Project directories -->
    <property name="source.dir" value="src"/>
    <property name="lib.dir" value="lib"/>  
	<property name="tools.dir" value="tools"/>
	
	<!-- Generated Directories -->
    <property name="build.dir" value="build"/>
	<property name="dependencies.dir" value="${build.dir}/dependencies"/>
	<property name="compile.dir" value="${build.dir}/compile"/>
    <property name="deploy.dir" value="${build.dir}/deploy"/>
	<property name="publish.dir" value="${build.dir}/publish"/>
    
    <!-- Generated Files -->
    <property name="build.js.filename" value="${build.file.basename}.js"/>
	<property name="build.min.js.filename" value="${build.file.basename}_min.js"/>
    <property name="build.nolibs.js.filename" value="${build.file.basename}_nolibs.js"/>
    <property name="build.nolibs.min.js.filename" value="${build.file.basename}_nolibs_min.js"/>
    
    <!-- ================================================================== -->
    <!-- Filesets, Patternsets, Paths                                       -->
    <!-- ================================================================== -->
    
    <fileset id="dependencies.fileset" dir="${dependencies.dir}">
        <include name="cxd/cxd.js" />
        <include name="cim/cim.js" />
        <include name="json2.js" />
    </fileset>
    
    <fileset id="dependencies.nolibs.fileset" dir="${dependencies.dir}">
        <include name="cxd/cxd_nolibs.js" />
        <include name="cim/cim_nolibs.js" />
    </fileset>
    
	<!-- ================================================================== -->
    <!-- Includes/Requirements                                              -->
    <!-- ================================================================== -->
    
    <import file="${tools.dir}/sharedBuild/moduleHelper.xml"/>
    <taskdef name="jscomp" classname="com.google.javascript.jscomp.ant.CompileTask" classpath="${tools.dir}/compiler.jar"/>
    
    <!-- ============================================================== -->
    <!-- Targets                                                        -->
    <!-- ============================================================== -->
	
	<target name="get-dependencies" description="--> Fetch all the dependencies needed for building the project">
        <!-- Use the "build" configuration when resolving if not specified before now -->
		<antcall target="moduleHelper-retrieve-dependencies">
            <param name="module.retrieved.dependencies.dir" value="${dependencies.dir}"/>
            <param name="ivy.configuration" value="build"/>
        </antcall>
        
        <copy todir="${dependencies.dir}">
            <fileset dir="${lib.dir}" includes="**/*" />
        </copy>
    </target>
	
    <target name="compile" 
            description="--> Compile the project" 
            depends="get-dependencies">
        
        <delete dir="${compile.dir}"/>
        <mkdir dir="${compile.dir}"/>
        
        <!-- Non-minified with dependencies -->
        <concat destfile="${compile.dir}/${build.js.filename}" overwrite="true">
            <fileset dir="${source.dir}" includes="**/*.js"/>
            <fileset refid="dependencies.fileset"/>
        </concat>
        
        <!-- Non-minified without dependencies -->
        <concat destfile="${compile.dir}/${build.nolibs.js.filename}" overwrite="true">
            <fileset dir="${source.dir}" includes="**/*.js"/>
            <fileset refid="dependencies.nolibs.fileset"/>
        </concat>
        
        <!-- Minified with dependencies -->
        <jscomp output="${compile.dir}/${build.min.js.filename}" compilationLevel="${jscomp.compilationLevel}" warning="quiet" debug="false">
            <sources dir="${compile.dir}" files="${build.js.filename}" />
        </jscomp>

        <!-- Minified without dependencies -->
        <jscomp output="${compile.dir}/${build.nolibs.min.js.filename}" compilationLevel="${jscomp.compilationLevel}" warning="quiet" debug="false">
            <sources dir="${compile.dir}" files="${build.nolibs.js.filename}" />
        </jscomp>
    </target>
    
	<target name="build"
            description="--> Build the project and prepare files for deployment"
            depends="compile">

		<delete dir="${deploy.dir}"/>
		<mkdir dir="${deploy.dir}"/>

        <copy file="module.properties" todir="${deploy.dir}" overwrite="true"/>
        <antcall target="moduleHelper-build-deployable-file"><param name="compiled.filename" value="${build.js.filename}"/></antcall>
        <antcall target="moduleHelper-build-deployable-file"><param name="compiled.filename" value="${build.min.js.filename}"/></antcall>
        <antcall target="moduleHelper-build-deployable-file"><param name="compiled.filename" value="${build.nolibs.js.filename}"/></antcall>
        <antcall target="moduleHelper-build-deployable-file"><param name="compiled.filename" value="${build.nolibs.min.js.filename}"/></antcall>

    </target>
    
    <target name="deploy-local"
            description="--> Deploy the module to a Covalent server"
            depends="build">
		<antcall target="moduleHelper-deploy-local"/>
	</target>
	
	<target name="publish" 
            description="--> Publish artifacts to repository" 
            depends="build">
        <antcall target="moduleHelper-publish"/>
    </target>
    
    <target name="clean"
            description="--> Clean the project">
        <delete dir="${build.dir}"/>
        <delete dir="${dependencies.dir}"/>
        <delete dir="${compile.dir}"/>
        <delete dir="${deploy.dir}"/>
        <delete dir="${publish.dir}"/>
    </target>

</project>
